<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Html on </title>
    <link>http://localhost:1313/tags/html/</link>
    <description>Recent content in Html on </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <managingEditor>chenwy24@mails.tsinghua.edu.cn (Posvirus&#39; Blog)</managingEditor>
    <webMaster>chenwy24@mails.tsinghua.edu.cn (Posvirus&#39; Blog)</webMaster>
    <lastBuildDate>Tue, 22 Jul 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/html/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>exec_once()函数执行逻辑</title>
      <link>http://localhost:1313/post/ysyx-exec_once/</link>
      <pubDate>Tue, 22 Jul 2025 00:00:00 +0000</pubDate><author>chenwy24@mails.tsinghua.edu.cn (Posvirus&#39; Blog)</author>
      <guid>http://localhost:1313/post/ysyx-exec_once/</guid>
      <description>&lt;p&gt;首先，&lt;code&gt;exec_once()&lt;/code&gt;会接收&lt;code&gt;Decode&lt;/code&gt;结构体指针&lt;code&gt; s&lt;/code&gt;，以及当前的PC值&lt;code&gt;pc&lt;/code&gt;，&lt;code&gt;pc&lt;/code&gt;比较好理解，它通常是通过&lt;code&gt;CPU_state&lt;/code&gt;结构体&lt;code&gt;cpu&lt;/code&gt;中的&lt;code&gt;pc&lt;/code&gt;成员传递的，RV32 ISA的&lt;code&gt;CPU_state&lt;/code&gt;结构体定义在&lt;code&gt;isa-def.h&lt;/code&gt;中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;word_t&lt;/span&gt; gpr[&lt;span style=&#34;color:#a6e22e&#34;&gt;MUXDEF&lt;/span&gt;(CONFIG_RVE, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;)];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;vaddr_t&lt;/span&gt; pc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#a6e22e&#34;&gt;MUXDEF&lt;/span&gt;(CONFIG_RV64, riscv64_CPU_state, riscv32_CPU_state);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;包含一个寄存器堆与PC寄存器，可以这样说，&lt;code&gt;CPU_state&lt;/code&gt;结构体定义了处理器核的状态。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Decode&lt;/code&gt;结构体被定义在&lt;code&gt;decode.h&lt;/code&gt;中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Decode {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;vaddr_t&lt;/span&gt; pc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;vaddr_t&lt;/span&gt; snpc; &lt;span style=&#34;color:#75715e&#34;&gt;// static next pc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;vaddr_t&lt;/span&gt; dnpc; &lt;span style=&#34;color:#75715e&#34;&gt;// dynamic next pc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  ISADecodeInfo isa;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;IFDEF&lt;/span&gt;(CONFIG_ITRACE, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; logbuf[&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} Decode;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其定义了当前PC值，以及该指令执行后的下一PC值（这里暂时不说明静态/动态有什么区别），其次，它还定义了一个&lt;code&gt;ISADecodeInfo&lt;/code&gt;结构体成员&lt;code&gt;isa&lt;/code&gt;，其定义在&lt;code&gt;isa-def.h&lt;/code&gt;中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; inst;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#a6e22e&#34;&gt;MUXDEF&lt;/span&gt;(CONFIG_RV64, riscv64_ISADecodeInfo, riscv32_ISADecodeInfo);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不难看出，这其实就是当前的指令。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;exec_once()&lt;/code&gt;接收这两个参数后，会首先将CPU的当前PC值&lt;code&gt;pc&lt;/code&gt;传递至&lt;code&gt;s&lt;/code&gt;中，并将&lt;code&gt;s&lt;/code&gt;中的当前PC值与下一静态PC值均设为CPU的当前PC值&lt;code&gt;pc&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;随后，&lt;code&gt;exec_once()&lt;/code&gt;会调用&lt;code&gt;isa_exec_once()&lt;/code&gt;函数，并将&lt;code&gt;s&lt;/code&gt;传递进入该函数，该函数执行完成后，代表当前指令执行完成，随后&lt;code&gt;exec_once()&lt;/code&gt;会将&lt;code&gt;s&lt;/code&gt;中的下一动态PC值&lt;code&gt;dnpc&lt;/code&gt;置为CPU的当前PC值&lt;code&gt;pc&lt;/code&gt;，代表执行完成。&lt;/p&gt;&#xA;&lt;p&gt;因此，完成指令执行的核心函数是&lt;code&gt;isa_exec_once()&lt;/code&gt;，它被定义在&lt;code&gt;inst.c&lt;/code&gt;中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isa_exec_once&lt;/span&gt;(Decode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;isa.inst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inst_fetch&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;snpc, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decode_exec&lt;/span&gt;(s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其使用&lt;code&gt;inst_fetch()&lt;/code&gt;获取当前指令（IF），并使用&lt;code&gt;decode_exec()&lt;/code&gt;进行指令译码（ID）与执行（EX）。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;inst_fetch()&lt;/code&gt;定义在&lt;code&gt;ifetch.h&lt;/code&gt;中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inst_fetch&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;vaddr_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pc, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; inst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vaddr_ifetch&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pc, len);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pc) &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; inst;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它实际上首先读取了当前PC值对应的指令（并返回），并将&lt;code&gt;s&lt;/code&gt;的下一静态PC值加4。其中&lt;code&gt;vaddr_ifetch()&lt;/code&gt;定义在&lt;code&gt;vaddr.c&lt;/code&gt;中，它目前就是一条简单的读取内存的指令。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;这里，我们就可以理解下一静态PC值与下一动态PC值的区别，下一静态PC值是指在物理存储上，存储于当前指令后的下一条指令的地址，在以字节编址的32位CPU上，成立&lt;code&gt;snpc = pc + 4&lt;/code&gt;，下一动态PC值则是在当前指令真正执行完成后，对应的下一PC值，由于跳转指令的存在，其与下一静态PC值并不一定一致。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
